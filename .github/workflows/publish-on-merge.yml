name: Publish on Merge

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  check-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Check if version changed
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version tag already exists
          if git tag -l | grep -q "^v$CURRENT_VERSION$"; then
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version v$CURRENT_VERSION already exists, skipping release"
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "New version detected: v$CURRENT_VERSION"
          fi

      - name: Build library
        if: steps.version_check.outputs.version_changed == 'true'
        run: npm run build

      - name: Run tests (if any)
        if: steps.version_check.outputs.version_changed == 'true'
        run: npm test --if-present

      - name: Create and push tag
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version_check.outputs.current_version }}
          git push origin ${{ steps.version_check.outputs.current_version }}
          echo "‚úÖ Created and pushed tag ${{ steps.version_check.outputs.current_version }}"

      - name: Publish to npm
        if: steps.version_check.outputs.version_changed == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get previous tag for changelog
        if: steps.version_check.outputs.version_changed == 'true'
        id: get_previous_tag
        run: |
          PREVIOUS_TAG=$(git tag -l --sort=-version:refname | grep -v "^${{ steps.version_check.outputs.current_version }}$" | head -n 1)
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "previous_tag=HEAD~10" >> $GITHUB_OUTPUT
            echo "No previous tag found, using HEAD~10 for comparison"
          else
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "Previous tag: $PREVIOUS_TAG"
          fi

      - name: Create GitHub Release
        if: steps.version_check.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_check.outputs.current_version }}
          name: Release ${{ steps.version_check.outputs.current_version }}
          body: |
            ## Changes in ${{ steps.version_check.outputs.current_version }}

            üöÄ **smooth-auto-scroll** has been updated!

            ### Installation
            ```bash
            npm install smooth-auto-scroll@${{ steps.version_check.outputs.current_version }}
            ```

            ### Demo
            Try the interactive demo: https://marcderhammer.github.io/smooth-auto-scroll/

            ### Full Changelog
            See all changes: https://github.com/marcderhammer/smooth-auto-scroll/compare/${{ steps.get_previous_tag.outputs.previous_tag }}...${{ steps.version_check.outputs.current_version }}
          draft: false
          prerelease: ${{ contains(steps.version_check.outputs.current_version, '-') }}
          generate_release_notes: true

      - name: Merge main back to develop
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          echo "üîÑ Syncing develop branch with main after release"
          git fetch origin
          git checkout develop
          git merge origin/main --ff-only
          git push origin develop
          if git ls-remote --exit-code --heads origin develop; then
            git checkout develop
          if git ls-remote --exit-code --heads origin develop; then
            git checkout develop
            git merge origin/main --ff-only
            git push origin develop
            echo "‚úÖ Updated develop branch with release changes"
          else
            echo "‚ö†Ô∏è  'develop' branch does not exist. Skipping sync."
          fi

      - name: No release needed
        if: steps.version_check.outputs.version_changed == 'false'
        run: |
          echo "‚ÑπÔ∏è  No version change detected, skipping release"
          echo "Current version ${{ steps.version_check.outputs.current_version }} already exists"
